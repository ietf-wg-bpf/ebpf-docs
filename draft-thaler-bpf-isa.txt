



Network Working Group                                     D. Thaler, Ed.
Internet-Draft                                                 Microsoft
Intended status: Standards Track                          5 October 2023
Expires: 7 April 2024


                BPF Instruction Set Specification, v1.0
                        draft-thaler-bpf-isa-02

Abstract

   This document specifies version 1.0 of the BPF instruction set.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 7 April 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Documentation conventions . . . . . . . . . . . . . . . . . .   2




Thaler                    Expires 7 April 2024                  [Page 1]

Internet-Draft                  eBPF ISA                    October 2023


     1.1.  Types . . . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.2.  Functions . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.3.  Definitions . . . . . . . . . . . . . . . . . . . . . . .   4
   2.  Instruction encoding  . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Instruction classes . . . . . . . . . . . . . . . . . . .   6
   3.  Arithmetic and jump instructions  . . . . . . . . . . . . . .   6
     3.1.  Arithmetic instructions . . . . . . . . . . . . . . . . .   7
     3.2.  Byte swap instructions  . . . . . . . . . . . . . . . . .  10
     3.3.  Jump instructions . . . . . . . . . . . . . . . . . . . .  11
       3.3.1.  Helper functions  . . . . . . . . . . . . . . . . . .  12
       3.3.2.  Program-local functions . . . . . . . . . . . . . . .  13
   4.  Load and store instructions . . . . . . . . . . . . . . . . .  13
     4.1.  Regular load and store operations . . . . . . . . . . . .  15
     4.2.  Sign-extension load operations  . . . . . . . . . . . . .  15
     4.3.  Atomic operations . . . . . . . . . . . . . . . . . . . .  15
     4.4.  64-bit immediate instructions . . . . . . . . . . . . . .  17
       4.4.1.  Maps  . . . . . . . . . . . . . . . . . . . . . . . .  19
       4.4.2.  Platform Variables  . . . . . . . . . . . . . . . . .  19
     4.5.  Legacy BPF Packet access instructions . . . . . . . . . .  19
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  19
   6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  20
   7.  Appendix  . . . . . . . . . . . . . . . . . . . . . . . . . .  21
   8.  Normative References  . . . . . . . . . . . . . . . . . . . .  39
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  39

1.  Documentation conventions

   For brevity and consistency, this document refers to families of
   types using a shorthand syntax and refers to several expository,
   mnemonic functions when describing the semantics of instructions.
   The range of valid values for those types and the semantics of those
   functions are defined in the following subsections.

1.1.  Types

   This document refers to integer types with the notation _SN_ to
   specify a type's signedness (_S_) and bit width (_N_), respectively.

                              +=====+==========+
                              | _S_ | Meaning  |
                              +=====+==========+
                              | _u_ | unsigned |
                              +-----+----------+
                              | _s_ | signed   |
                              +-----+----------+

                             Table 1: Meaning of
                             signedness notation.



Thaler                    Expires 7 April 2024                  [Page 2]

Internet-Draft                  eBPF ISA                    October 2023


                            +=======+===========+
                            | _N_   | Bit width |
                            +=======+===========+
                            | _8_   | 8 bits    |
                            +-------+-----------+
                            | _16_  | 16 bits   |
                            +-------+-----------+
                            | _32_  | 32 bits   |
                            +-------+-----------+
                            | _64_  | 64 bits   |
                            +-------+-----------+
                            | _128_ | 128 bits  |
                            +-------+-----------+

                             Table 2: Meaning of
                             bit-width notation.

   For example, _u32_ is a type whose valid values are all the 32-bit
   unsigned numbers and _s16_ is a types whose valid values are all the
   16-bit signed numbers.

1.2.  Functions

   *  _htobe16_: Takes an unsigned 16-bit number in host-endian format
      and returns the equivalent number as an unsigned 16-bit number in
      big-endian format.

   *  _htobe32_: Takes an unsigned 32-bit number in host-endian format
      and returns the equivalent number as an unsigned 32-bit number in
      big-endian format.

   *  _htobe64_: Takes an unsigned 64-bit number in host-endian format
      and returns the equivalent number as an unsigned 64-bit number in
      big-endian format.

   *  _htole16_: Takes an unsigned 16-bit number in host-endian format
      and returns the equivalent number as an unsigned 16-bit number in
      little-endian format.

   *  _htole32_: Takes an unsigned 32-bit number in host-endian format
      and returns the equivalent number as an unsigned 32-bit number in
      little-endian format.

   *  _htole64_: Takes an unsigned 64-bit number in host-endian format
      and returns the equivalent number as an unsigned 64-bit number in
      little-endian format.





Thaler                    Expires 7 April 2024                  [Page 3]

Internet-Draft                  eBPF ISA                    October 2023


   *  _bswap16_: Takes an unsigned 16-bit number in either big- or
      little-endian format and returns the equivalent number with the
      same bit width but opposite endianness.

   *  _bswap32_: Takes an unsigned 32-bit number in either big- or
      little-endian format and returns the equivalent number with the
      same bit width but opposite endianness.

   *  _bswap64_: Takes an unsigned 64-bit number in either big- or
      little-endian format and returns the equivalent number with the
      same bit width but opposite endianness.

1.3.  Definitions

   Sign Extend  To _sign extend an_ X _-bit number, A, to a_ Y _-bit
      number, B ,_ means to

      1.  Copy all X bits from _A_ to the lower X bits of _B_.

      2.  Set the value of the remaining Y - X bits of _B_ to the value
          of the most-significant bit of _A_.

      |  *Example*
      |  
      |  Sign extend an 8-bit number A to a 16-bit number B on a big-
      |  endian platform:
      |  
      |         A:          10000110
      |         B: 11111111 10000110

2.  Instruction encoding

   BPF has two instruction encodings:

   *  the basic instruction encoding, which uses 64 bits to encode an
      instruction

   *  the wide instruction encoding, which appends a second 64-bit
      immediate (i.e., constant) value after the basic instruction for a
      total of 128 bits.

   The fields conforming an encoded basic instruction are stored in the
   following order:

  opcode:8 src_reg:4 dst_reg:4 offset:16 imm:32 // In little-endian BPF.
  opcode:8 dst_reg:4 src_reg:4 offset:16 imm:32 // In big-endian BPF.

   *imm*  signed integer immediate value



Thaler                    Expires 7 April 2024                  [Page 4]

Internet-Draft                  eBPF ISA                    October 2023


   *offset*  signed integer offset used with pointer arithmetic

   *src_reg*  the source register number (0-10), except where otherwise
      specified (64-bit immediate instructions (Section 4.4) reuse this
      field for other purposes)

   *dst_reg*  destination register number (0-10)

   *opcode*  operation to perform

   Note that the contents of multi-byte fields ('imm' and 'offset') are
   stored using big-endian byte ordering in big-endian BPF and little-
   endian byte ordering in little-endian BPF.

   For example:

  opcode                  offset imm          assembly
         src_reg dst_reg
  07     0       1        00 00  44 33 22 11  r1 += 0x11223344 // little
         dst_reg src_reg
  07     1       0        00 00  11 22 33 44  r1 += 0x11223344 // big

   Note that most instructions do not use all of the fields.  Unused
   fields shall be cleared to zero.

   As discussed below in 64-bit immediate instructions (Section 4.4), a
   64-bit immediate instruction uses a 64-bit immediate value that is
   constructed as follows.  The 64 bits following the basic instruction
   contain a pseudo instruction using the same format but with opcode,
   dst_reg, src_reg, and offset all set to zero, and imm containing the
   high 32 bits of the immediate value.

   This is depicted in the following figure:

           basic_instruction
     .-----------------------------.
     |                             |
     code:8 regs:8 offset:16 imm:32 unused:32 imm:32
                                    |              |
                                    '--------------'
                                   pseudo instruction

   Thus the 64-bit immediate value is constructed as follows:

   |  imm64 = (next_imm << 32) | imm






Thaler                    Expires 7 April 2024                  [Page 5]

Internet-Draft                  eBPF ISA                    October 2023


   where 'next_imm' refers to the imm value of the pseudo instruction
   following the basic instruction.  The unused bytes in the pseudo
   instruction are reserved and shall be cleared to zero.

2.1.  Instruction classes

   The three LSB bits of the 'opcode' field store the instruction class:

   +===========+=======+====================+==========================+
   | class     | value | description        | reference                |
   +===========+=======+====================+==========================+
   | BPF_LD    | 0x00  | non-standard       | Load and store           |
   |           |       | load operations    | instructions (Section 4) |
   +-----------+-------+--------------------+--------------------------+
   | BPF_LDX   | 0x01  | load into          | Load and store           |
   |           |       | register           | instructions (Section 4) |
   |           |       | operations         |                          |
   +-----------+-------+--------------------+--------------------------+
   | BPF_ST    | 0x02  | store from         | Load and store           |
   |           |       | immediate          | instructions (Section 4) |
   |           |       | operations         |                          |
   +-----------+-------+--------------------+--------------------------+
   | BPF_STX   | 0x03  | store from         | Load and store           |
   |           |       | register           | instructions (Section 4) |
   |           |       | operations         |                          |
   +-----------+-------+--------------------+--------------------------+
   | BPF_ALU   | 0x04  | 32-bit             | Arithmetic and jump      |
   |           |       | arithmetic         | instructions (Section 3) |
   |           |       | operations         |                          |
   +-----------+-------+--------------------+--------------------------+
   | BPF_JMP   | 0x05  | 64-bit jump        | Arithmetic and jump      |
   |           |       | operations         | instructions (Section 3) |
   +-----------+-------+--------------------+--------------------------+
   | BPF_JMP32 | 0x06  | 32-bit jump        | Arithmetic and jump      |
   |           |       | operations         | instructions (Section 3) |
   +-----------+-------+--------------------+--------------------------+
   | BPF_ALU64 | 0x07  | 64-bit             | Arithmetic and jump      |
   |           |       | arithmetic         | instructions (Section 3) |
   |           |       | operations         |                          |
   +-----------+-------+--------------------+--------------------------+

                                  Table 3

3.  Arithmetic and jump instructions

   For arithmetic and jump instructions (BPF_ALU, BPF_ALU64, BPF_JMP and
   BPF_JMP32), the 8-bit 'opcode' field is divided into three parts:




Thaler                    Expires 7 April 2024                  [Page 6]

Internet-Draft                  eBPF ISA                    October 2023


               +==============+========+===================+
               | 4 bits (MSB) | 1 bit  | 3 bits (LSB)      |
               +==============+========+===================+
               | code         | source | instruction class |
               +--------------+--------+-------------------+

                                  Table 4

   *code*  the operation code, whose meaning varies by instruction class

   *source*  the source operand location, which unless otherwise
      specified is one of:

    +========+=======+================================================+
    | source | value | description                                    |
    +========+=======+================================================+
    | BPF_K  | 0x00  | use 32-bit 'imm' value as source operand       |
    +--------+-------+------------------------------------------------+
    | BPF_X  | 0x08  | use 'src_reg' register value as source operand |
    +--------+-------+------------------------------------------------+

                                  Table 5

   *instruction class*  the instruction class (see Instruction classes
      (Section 2.1))

3.1.  Arithmetic instructions

   BPF_ALU uses 32-bit wide operands while BPF_ALU64 uses 64-bit wide
   operands for otherwise identical operations.  The 'code' field
   encodes the operation as below, where 'src' and 'dst' refer to the
   values of the source and destination registers, respectively.



















Thaler                    Expires 7 April 2024                  [Page 7]

Internet-Draft                  eBPF ISA                    October 2023


   +===========+=======+=========+=====================================+
   | code      | value | offset  | description                         |
   +===========+=======+=========+=====================================+
   | BPF_ADD   | 0x00  | 0       | dst += src                          |
   +-----------+-------+---------+-------------------------------------+
   | BPF_SUB   | 0x10  | 0       | dst -= src                          |
   +-----------+-------+---------+-------------------------------------+
   | BPF_MUL   | 0x20  | 0       | dst *= src                          |
   +-----------+-------+---------+-------------------------------------+
   | BPF_DIV   | 0x30  | 0       | dst = (src != 0) ? (dst /           |
   |           |       |         | src) : 0                            |
   +-----------+-------+---------+-------------------------------------+
   | BPF_SDIV  | 0x30  | 1       | dst = (src != 0) ? (dst s/          |
   |           |       |         | src) : 0                            |
   +-----------+-------+---------+-------------------------------------+
   | BPF_OR    | 0x40  | 0       | dst |= src                          |
   +-----------+-------+---------+-------------------------------------+
   | BPF_AND   | 0x50  | 0       | dst &= src                          |
   +-----------+-------+---------+-------------------------------------+
   | BPF_LSH   | 0x60  | 0       | dst <<= (src & mask)                |
   +-----------+-------+---------+-------------------------------------+
   | BPF_RSH   | 0x70  | 0       | dst >>= (src & mask)                |
   +-----------+-------+---------+-------------------------------------+
   | BPF_NEG   | 0x80  | 0       | dst = -dst                          |
   +-----------+-------+---------+-------------------------------------+
   | BPF_MOD   | 0x90  | 0       | dst = (src != 0) ? (dst %           |
   |           |       |         | src) : dst                          |
   +-----------+-------+---------+-------------------------------------+
   | BPF_SMOD  | 0x90  | 1       | dst = (src != 0) ? (dst s%          |
   |           |       |         | src) : dst                          |
   +-----------+-------+---------+-------------------------------------+
   | BPF_XOR   | 0xa0  | 0       | dst ^= src                          |
   +-----------+-------+---------+-------------------------------------+
   | BPF_MOV   | 0xb0  | 0       | dst = src                           |
   +-----------+-------+---------+-------------------------------------+
   | BPF_MOVSX | 0xb0  | 8/16/32 | dst = (s8,s16,s32)src               |
   +-----------+-------+---------+-------------------------------------+
   | BPF_ARSH  | 0xc0  | 0       | sign extending (Section 1.3)        |
   |           |       |         | dst >>= (src & mask)                |
   +-----------+-------+---------+-------------------------------------+
   | BPF_END   | 0xd0  | 0       | byte swap operations (see           |
   |           |       |         | Byte swap instructions              |
   |           |       |         | (Section 3.2) below)                |
   +-----------+-------+---------+-------------------------------------+

                                  Table 6





Thaler                    Expires 7 April 2024                  [Page 8]

Internet-Draft                  eBPF ISA                    October 2023


   Underflow and overflow are allowed during arithmetic operations,
   meaning the 64-bit or 32-bit value will wrap.  If BPF program
   execution would result in division by zero, the destination register
   is instead set to zero.  If execution would result in modulo by zero,
   for BPF_ALU64 the value of the destination register is unchanged
   whereas for BPF_ALU the upper 32 bits of the destination register are
   zeroed.

   BPF_ADD | BPF_X | BPF_ALU means:

     dst = (u32) ((u32) dst + (u32) src)

   where '(u32)' indicates that the upper 32 bits are zeroed.

   BPF_ADD | BPF_X | BPF_ALU64 means:

     dst = dst + src

   BPF_XOR | BPF_K | BPF_ALU means:

     dst = (u32) dst ^ (u32) imm32

   BPF_XOR | BPF_K | BPF_ALU64 means:

     dst = dst ^ imm32

   Note that most instructions have instruction offset of 0.  Only three
   instructions (BPF_SDIV, BPF_SMOD, BPF_MOVSX) have a non-zero offset.

   The division and modulo operations support both unsigned and signed
   flavors.

   For unsigned operations (BPF_DIV and BPF_MOD), for BPF_ALU, 'imm' is
   interpreted as a 32-bit unsigned value.  For BPF_ALU64, 'imm' is
   first sign extended (Section 1.3) from 32 to 64 bits, and then
   interpreted as a 64-bit unsigned value.

   For signed operations (BPF_SDIV and BPF_SMOD), for BPF_ALU, 'imm' is
   interpreted as a 32-bit signed value.  For BPF_ALU64, 'imm' is first
   sign extended (Section 1.3) from 32 to 64 bits, and then interpreted
   as a 64-bit signed value.

   The BPF_MOVSX instruction does a move operation with sign extension.
   BPF_ALU | BPF_MOVSX sign extends (Section 1.3) 8-bit and 16-bit
   operands into 32 bit operands, and zeroes the remaining upper 32
   bits.  BPF_ALU64 | BPF_MOVSX sign extends (Section 1.3) 8-bit,
   16-bit, and 32-bit operands into 64 bit operands.




Thaler                    Expires 7 April 2024                  [Page 9]

Internet-Draft                  eBPF ISA                    October 2023


   Shift operations use a mask of 0x3F (63) for 64-bit operations and
   0x1F (31) for 32-bit operations.

3.2.  Byte swap instructions

   The byte swap instructions use instruction classes of BPF_ALU and
   BPF_ALU64 and a 4-bit 'code' field of BPF_END.

   The byte swap instructions operate on the destination register only
   and do not use a separate source register or immediate value.

   For BPF_ALU, the 1-bit source operand field in the opcode is used to
   select what byte order the operation converts from or to.  For
   BPF_ALU64, the 1-bit source operand field in the opcode is reserved
   and must be set to 0.

       +===========+===========+=======+===========================+
       | class     | source    | value | description               |
       +===========+===========+=======+===========================+
       | BPF_ALU   | BPF_TO_LE | 0x00  | convert between host byte |
       |           |           |       | order and little endian   |
       +-----------+-----------+-------+---------------------------+
       | BPF_ALU   | BPF_TO_BE | 0x08  | convert between host byte |
       |           |           |       | order and big endian      |
       +-----------+-----------+-------+---------------------------+
       | BPF_ALU64 | Reserved  | 0x00  | do byte swap              |
       |           |           |       | unconditionally           |
       +-----------+-----------+-------+---------------------------+

                                  Table 7

   The 'imm' field encodes the width of the swap operations.  The
   following widths are supported: 16, 32 and 64.

   Examples:

   BPF_ALU | BPF_TO_LE | BPF_END with imm = 16/32/64 means:

     dst = htole16(dst)
     dst = htole32(dst)
     dst = htole64(dst)

   BPF_ALU | BPF_TO_BE | BPF_END with imm = 16/32/64 means:

     dst = htobe16(dst)
     dst = htobe32(dst)
     dst = htobe64(dst)




Thaler                    Expires 7 April 2024                 [Page 10]

Internet-Draft                  eBPF ISA                    October 2023


   BPF_ALU64 | BPF_TO_LE | BPF_END with imm = 16/32/64 means:

     dst = bswap16(dst)
     dst = bswap32(dst)
     dst = bswap64(dst)

3.3.  Jump instructions

   BPF_JMP32 uses 32-bit wide operands while BPF_JMP uses 64-bit wide
   operands for otherwise identical operations.  The 'code' field
   encodes the operation as below:

   +==========+=======+=====+=====================+===================+
   | code     | value | src | description         | notes             |
   +==========+=======+=====+=====================+===================+
   | BPF_JA   | 0x0   | 0x0 | PC += offset        | BPF_JMP class     |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JA   | 0x0   | 0x0 | PC += imm           | BPF_JMP32 class   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JEQ  | 0x1   | any | PC += offset if dst |                   |
   |          |       |     | == src              |                   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JGT  | 0x2   | any | PC += offset if dst | unsigned          |
   |          |       |     | > src               |                   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JGE  | 0x3   | any | PC += offset if dst | unsigned          |
   |          |       |     | >= src              |                   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JSET | 0x4   | any | PC += offset if dst |                   |
   |          |       |     | & src               |                   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JNE  | 0x5   | any | PC += offset if dst |                   |
   |          |       |     | != src              |                   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JSGT | 0x6   | any | PC += offset if dst | signed            |
   |          |       |     | > src               |                   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JSGE | 0x7   | any | PC += offset if dst | signed            |
   |          |       |     | >= src              |                   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_CALL | 0x8   | 0x0 | call helper         | see Helper        |
   |          |       |     | function by address | functions         |
   |          |       |     |                     | (Section 3.3.1)   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_CALL | 0x8   | 0x1 | call PC += imm      | see Program-local |
   |          |       |     |                     | functions         |
   |          |       |     |                     | (Section 3.3.2)   |
   +----------+-------+-----+---------------------+-------------------+



Thaler                    Expires 7 April 2024                 [Page 11]

Internet-Draft                  eBPF ISA                    October 2023


   | BPF_CALL | 0x8   | 0x2 | call helper         | see Helper        |
   |          |       |     | function by BTF ID  | functions         |
   |          |       |     |                     | (Section 3.3.1)   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_EXIT | 0x9   | 0x0 | return              | BPF_JMP only      |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JLT  | 0xa   | any | PC += offset if dst | unsigned          |
   |          |       |     | < src               |                   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JLE  | 0xb   | any | PC += offset if dst | unsigned          |
   |          |       |     | <= src              |                   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JSLT | 0xc   | any | PC += offset if dst | signed            |
   |          |       |     | < src               |                   |
   +----------+-------+-----+---------------------+-------------------+
   | BPF_JSLE | 0xd   | any | PC += offset if dst | signed            |
   |          |       |     | <= src              |                   |
   +----------+-------+-----+---------------------+-------------------+

                                 Table 8

   The BPF program needs to store the return value into register R0
   before doing a BPF_EXIT.

   Example:

   BPF_JSGE | BPF_X | BPF_JMP32 (0x7e) means:

     if (s32)dst s>= (s32)src goto +offset

   where 's>=' indicates a signed '>=' comparison.

   BPF_JA | BPF_K | BPF_JMP32 (0x06) means:

     gotol +imm

   where 'imm' means the branch offset comes from insn 'imm' field.

   Note that there are two flavors of BPF_JA instructions.  The BPF_JMP
   class permits a 16-bit jump offset specified by the 'offset' field,
   whereas the BPF_JMP32 class permits a 32-bit jump offset specified by
   the 'imm' field.  A > 16-bit conditional jump may be converted to a <
   16-bit conditional jump plus a 32-bit unconditional jump.

3.3.1.  Helper functions

   Helper functions are a concept whereby BPF programs can call into a
   set of function calls exposed by the underlying platform.



Thaler                    Expires 7 April 2024                 [Page 12]

Internet-Draft                  eBPF ISA                    October 2023


   Historically, each helper function was identified by an address
   encoded in the imm field.  The available helper functions may differ
   for each program type, but address values are unique across all
   program types.

   Platforms that support the BPF Type Format (BTF) support identifying
   a helper function by a BTF ID encoded in the imm field, where the BTF
   ID identifies the helper name and type.

3.3.2.  Program-local functions

   Program-local functions are functions exposed by the same BPF program
   as the caller, and are referenced by offset from the call
   instruction, similar to BPF_JA.  The offset is encoded in the imm
   field of the call instruction.  A BPF_EXIT within the program-local
   function will return to the caller.

4.  Load and store instructions

   For load and store instructions (BPF_LD, BPF_LDX, BPF_ST, and
   BPF_STX), the 8-bit 'opcode' field is divided as:

               +==============+========+===================+
               | 3 bits (MSB) | 2 bits | 3 bits (LSB)      |
               +==============+========+===================+
               | mode         | size   | instruction class |
               +--------------+--------+-------------------+

                                  Table 9

   The mode modifier is one of:




















Thaler                    Expires 7 April 2024                 [Page 13]

Internet-Draft                  eBPF ISA                    October 2023


      +============+=======+==================+=====================+
      | mode       | value | description      | reference           |
      | modifier   |       |                  |                     |
      +============+=======+==================+=====================+
      | BPF_IMM    | 0x00  | 64-bit immediate | 64-bit immediate    |
      |            |       | instructions     | instructions        |
      |            |       |                  | (Section 4.4)       |
      +------------+-------+------------------+---------------------+
      | BPF_ABS    | 0x20  | legacy BPF       | Legacy BPF Packet   |
      |            |       | packet access    | access instructions |
      |            |       | (absolute)       | (Section 4.5)       |
      +------------+-------+------------------+---------------------+
      | BPF_IND    | 0x40  | legacy BPF       | Legacy BPF Packet   |
      |            |       | packet access    | access instructions |
      |            |       | (indirect)       | (Section 4.5)       |
      +------------+-------+------------------+---------------------+
      | BPF_MEM    | 0x60  | regular load and | Regular load and    |
      |            |       | store operations | store operations    |
      |            |       |                  | (Section 4.1)       |
      +------------+-------+------------------+---------------------+
      | BPF_MEMSX  | 0x80  | sign-extension   | Sign-extension load |
      |            |       | load operations  | operations          |
      |            |       |                  | (Section 4.2)       |
      +------------+-------+------------------+---------------------+
      | BPF_ATOMIC | 0xc0  | atomic           | Atomic operations   |
      |            |       | operations       | (Section 4.3)       |
      +------------+-------+------------------+---------------------+

                                  Table 10

   The size modifier is one of:

             +===============+=======+=======================+
             | size modifier | value | description           |
             +===============+=======+=======================+
             | BPF_W         | 0x00  | word (4 bytes)        |
             +---------------+-------+-----------------------+
             | BPF_H         | 0x08  | half word (2 bytes)   |
             +---------------+-------+-----------------------+
             | BPF_B         | 0x10  | byte                  |
             +---------------+-------+-----------------------+
             | BPF_DW        | 0x18  | double word (8 bytes) |
             +---------------+-------+-----------------------+

                                  Table 11






Thaler                    Expires 7 April 2024                 [Page 14]

Internet-Draft                  eBPF ISA                    October 2023


4.1.  Regular load and store operations

   The BPF_MEM mode modifier is used to encode regular load and store
   instructions that transfer data between a register and memory.

   BPF_MEM | <size> | BPF_STX means:

     *(size *) (dst + offset) = src

   BPF_MEM | <size> | BPF_ST means:

     *(size *) (dst + offset) = imm32

   BPF_MEM | <size> | BPF_LDX means:

     dst = *(unsigned size *) (src + offset)

   Where size is one of: BPF_B, BPF_H, BPF_W, or BPF_DW and 'unsigned
   size' is one of u8, u16, u32 or u64.

4.2.  Sign-extension load operations

   The BPF_MEMSX mode modifier is used to encode sign-extension
   (Section 1.3) load instructions that transfer data between a register
   and memory.

   BPF_MEMSX | <size> | BPF_LDX means:

     dst = *(signed size *) (src + offset)

   Where size is one of: BPF_B, BPF_H or BPF_W, and 'signed size' is one
   of s8, s16 or s32.

4.3.  Atomic operations

   Atomic operations are operations that operate on memory and can not
   be interrupted or corrupted by other access to the same memory region
   by other BPF programs or means outside of this specification.

   All atomic operations supported by BPF are encoded as store
   operations that use the BPF_ATOMIC mode modifier as follows:

   *  BPF_ATOMIC | BPF_W | BPF_STX for 32-bit operations

   *  BPF_ATOMIC | BPF_DW | BPF_STX for 64-bit operations

   *  8-bit and 16-bit wide atomic operations are not supported.




Thaler                    Expires 7 April 2024                 [Page 15]

Internet-Draft                  eBPF ISA                    October 2023


   The 'imm' field is used to encode the actual atomic operation.
   Simple atomic operation use a subset of the values defined to encode
   arithmetic operations in the 'imm' field to encode the atomic
   operation:

                     +=========+=======+=============+
                     | imm     | value | description |
                     +=========+=======+=============+
                     | BPF_ADD | 0x00  | atomic add  |
                     +---------+-------+-------------+
                     | BPF_OR  | 0x40  | atomic or   |
                     +---------+-------+-------------+
                     | BPF_AND | 0x50  | atomic and  |
                     +---------+-------+-------------+
                     | BPF_XOR | 0xa0  | atomic xor  |
                     +---------+-------+-------------+

                                  Table 12

   BPF_ATOMIC | BPF_W | BPF_STX with 'imm' = BPF_ADD means:

     *(u32 *)(dst + offset) += src

   BPF_ATOMIC | BPF_DW | BPF_STX with 'imm' = BPF ADD means:

     *(u64 *)(dst + offset) += src

   In addition to the simple atomic operations, there also is a modifier
   and two complex atomic operations:

     +=============+==================+=============================+
     | imm         | value            | description                 |
     +=============+==================+=============================+
     | BPF_FETCH   | 0x01             | modifier: return old value  |
     +-------------+------------------+-----------------------------+
     | BPF_XCHG    | 0xe0 | BPF_FETCH | atomic exchange             |
     +-------------+------------------+-----------------------------+
     | BPF_CMPXCHG | 0xf0 | BPF_FETCH | atomic compare and exchange |
     +-------------+------------------+-----------------------------+

                                 Table 13

   The BPF_FETCH modifier is optional for simple atomic operations, and
   always set for the complex atomic operations.  If the BPF_FETCH flag
   is set, then the operation also overwrites src with the value that
   was in memory before it was modified.





Thaler                    Expires 7 April 2024                 [Page 16]

Internet-Draft                  eBPF ISA                    October 2023


   The BPF_XCHG operation atomically exchanges src with the value
   addressed by dst + offset.

   The BPF_CMPXCHG operation atomically compares the value addressed by
   dst + offset with R0.  If they match, the value addressed by dst +
   offset is replaced with src.  In either case, the value that was at
   dst + offset before the operation is zero-extended and loaded back to
   R0.

4.4.  64-bit immediate instructions

   Instructions with the BPF_IMM 'mode' modifier use the wide
   instruction encoding defined in Instruction encoding (Section 2), and
   use the 'src' field of the basic instruction to hold an opcode
   subtype.

   The following table defines a set of BPF_IMM | BPF_DW | BPF_LD
   instructions with opcode subtypes in the 'src' field, using new terms
   such as "map" defined further below:
































Thaler                    Expires 7 April 2024                 [Page 17]

Internet-Draft                  eBPF ISA                    October 2023


    +============+======+===+========================+========+=======+
    |opcode      |opcode|src|pseudocode              |imm type|dst    |
    |construction|      |   |                        |        |type   |
    +============+======+===+========================+========+=======+
    |BPF_IMM |   |0x18  |0x0|dst = imm64             |integer |integer|
    |BPF_DW |    |      |   |                        |        |       |
    |BPF_LD      |      |   |                        |        |       |
    +------------+------+---+------------------------+--------+-------+
    |BPF_IMM |   |0x18  |0x1|dst = map_by_fd(imm)    |map fd  |map    |
    |BPF_DW |    |      |   |                        |        |       |
    |BPF_LD      |      |   |                        |        |       |
    +------------+------+---+------------------------+--------+-------+
    |BPF_IMM |   |0x18  |0x2|dst =                   |map fd  |data   |
    |BPF_DW |    |      |   |map_val(map_by_fd(imm)) |        |pointer|
    |BPF_LD      |      |   |+ next_imm              |        |       |
    +------------+------+---+------------------------+--------+-------+
    |BPF_IMM |   |0x18  |0x3|dst = var_addr(imm)     |variable|data   |
    |BPF_DW |    |      |   |                        |id      |pointer|
    |BPF_LD      |      |   |                        |        |       |
    +------------+------+---+------------------------+--------+-------+
    |BPF_IMM |   |0x18  |0x4|dst = code_addr(imm)    |integer |code   |
    |BPF_DW |    |      |   |                        |        |pointer|
    |BPF_LD      |      |   |                        |        |       |
    +------------+------+---+------------------------+--------+-------+
    |BPF_IMM |   |0x18  |0x5|dst = map_by_idx(imm)   |map     |map    |
    |BPF_DW |    |      |   |                        |index   |       |
    |BPF_LD      |      |   |                        |        |       |
    +------------+------+---+------------------------+--------+-------+
    |BPF_IMM |   |0x18  |0x6|dst =                   |map     |data   |
    |BPF_DW |    |      |   |map_val(map_by_idx(imm))|index   |pointer|
    |BPF_LD      |      |   |+ next_imm              |        |       |
    +------------+------+---+------------------------+--------+-------+

                                  Table 14

   where

   *  map_by_fd(imm) means to convert a 32-bit file descriptor into an
      address of a map (see Maps (Section 4.4.1))

   *  map_by_idx(imm) means to convert a 32-bit index into an address of
      a map

   *  map_val(map) gets the address of the first value in a given map

   *  var_addr(imm) gets the address of a platform variable (see
      Platform Variables (Section 4.4.2)) with a given id




Thaler                    Expires 7 April 2024                 [Page 18]

Internet-Draft                  eBPF ISA                    October 2023


   *  code_addr(imm) gets the address of the instruction at a specified
      relative offset in number of (64-bit) instructions

   *  the 'imm type' can be used by disassemblers for display

   *  the 'dst type' can be used for verification and JIT compilation
      purposes

4.4.1.  Maps

   Maps are shared memory regions accessible by BPF programs on some
   platforms.  A map can have various semantics as defined in a separate
   document, and may or may not have a single contiguous memory region,
   but the 'map_val(map)' is currently only defined for maps that do
   have a single contiguous memory region.

   Each map can have a file descriptor (fd) if supported by the
   platform, where 'map_by_fd(imm)' means to get the map with the
   specified file descriptor.  Each BPF program can also be defined to
   use a set of maps associated with the program at load time, and
   'map_by_idx(imm)' means to get the map with the given index in the
   set associated with the BPF program containing the instruction.

4.4.2.  Platform Variables

   Platform variables are memory regions, identified by integer ids,
   exposed by the runtime and accessible by BPF programs on some
   platforms.  The 'var_addr(imm)' operation means to get the address of
   the memory region identified by the given id.

4.5.  Legacy BPF Packet access instructions

   BPF previously introduced special instructions for access to packet
   data that were carried over from classic BPF.  However, these
   instructions are deprecated and should no longer be used.

5.  IANA Considerations

   This document proposes a new IANA registry for BPF instructions, as
   follows:

   *  Name of the registry: BPF Instruction Set

   *  Name of the registry group: same as registry name

   *  Required information for registrations: The values to appear in
      the entry fields.




Thaler                    Expires 7 April 2024                 [Page 19]

Internet-Draft                  eBPF ISA                    October 2023


   *  Syntax of registry entries: Each entry has the following fields:

      -  opcode: a 1-byte value in hex format indicating the value of
         the opcode field

      -  src: either a value indicating the value of the src field, or
         "any"

      -  imm: either a value indicating the value of the imm field, or
         "any"

      -  offset: either a value indicating the value of the offset
         field, or "any"

      -  description: description of what the instruction does,
         typically in pseudocode

      -  reference: a reference to the defining specification

      -  status: Permanent, Provisional, or Historical

   *  Registration policy (see RFC 8126 section 4 [RFC8126] for
      details):

      -  Permanent: Standards action or IESG Review

      -  Provisional: Specification required

      -  Historical: Specification required

   *  Initial registrations: See the Appendix.  Instructions other than
      those listed as deprecated are Permanent.  Any listed as
      deprecated are Historical.

6.  Acknowledgements

   This draft was generated from instruction-set.rst in the Linux kernel
   repository, to which a number of other individuals have authored
   contributions over time, including Akhil Raj, Will Hawkins, Christoph
   Hellwig, Jose E.  Marchesi, Kosuke Fujimoto, Shahab Vahedi, Tiezhu
   Yang, and Zheng Yejian, with review and suggestions by many others
   including Alan Jowett, Alexei Starovoitov, Andrii Nakryiko, Daniel
   Borkmann, David Vernet, Jim Harris, Quentin Monnet, Song Liu, Shung-
   Hsi Yu, Stanislav Fomichev, and Yonghong Song.







Thaler                    Expires 7 April 2024                 [Page 20]

Internet-Draft                  eBPF ISA                    October 2023


7.  Appendix

   Initial values for the BPF Instruction registry are given below.  The
   descriptions in this table are informative.  In case of any
   discrepancy, the reference is authoritative.

   +======+===+====+======+==========================+===============+
   |opcode|src|imm |offset|description               | reference     |
   +======+===+====+======+==========================+===============+
   |0x00  |0x0|any |0     |(additional immediate     | 64-bit        |
   |      |   |    |      |value)                    | immediate     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.4) |
   +------+---+----+------+--------------------------+---------------+
   |0x04  |0x0|any |0     |dst = (u32)((u32)dst +    | Arithmetic    |
   |      |   |    |      |(u32)imm)                 | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x05  |0x0|0x00|any   |goto +offset              | Jump          |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x06  |0x0|any |0     |goto +imm                 | Jump          |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x07  |0x0|any |0     |dst += imm                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x0c  |any|0x00|0     |dst = (u32)((u32)dst +    | Arithmetic    |
   |      |   |    |      |(u32)src)                 | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x0f  |any|0x00|0     |dst += src                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x14  |0x0|any |0     |dst = (u32)((u32)dst -    | Arithmetic    |
   |      |   |    |      |(u32)imm)                 | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x15  |0x0|any |any   |if dst == imm goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x16  |0x0|any |any   |if (u32)dst == imm goto   | Jump          |
   |      |   |    |      |+offset                   | instructions  |



Thaler                    Expires 7 April 2024                 [Page 21]

Internet-Draft                  eBPF ISA                    October 2023


   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x17  |0x0|any |0     |dst -= imm                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x18  |0x0|any |0     |dst = imm64               | 64-bit        |
   |      |   |    |      |                          | immediate     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.4) |
   +------+---+----+------+--------------------------+---------------+
   |0x18  |0x1|any |0     |dst = map_by_fd(imm)      | 64-bit        |
   |      |   |    |      |                          | immediate     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.4) |
   +------+---+----+------+--------------------------+---------------+
   |0x18  |0x2|any |0     |dst =                     | 64-bit        |
   |      |   |    |      |mva(map_by_fd(imm)) +     | immediate     |
   |      |   |    |      |next_imm                  | instructions  |
   |      |   |    |      |                          | (Section 4.4) |
   +------+---+----+------+--------------------------+---------------+
   |0x18  |0x3|any |0     |dst = variable_addr(imm)  | 64-bit        |
   |      |   |    |      |                          | immediate     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.4) |
   +------+---+----+------+--------------------------+---------------+
   |0x18  |0x4|any |0     |dst = code_addr(imm)      | 64-bit        |
   |      |   |    |      |                          | immediate     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.4) |
   +------+---+----+------+--------------------------+---------------+
   |0x18  |0x5|any |0     |dst = map_by_idx(imm)     | 64-bit        |
   |      |   |    |      |                          | immediate     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.4) |
   +------+---+----+------+--------------------------+---------------+
   |0x18  |0x6|any |0     |dst =                     | 64-bit        |
   |      |   |    |      |mva(map_by_idx(imm)) +    | immediate     |
   |      |   |    |      |next_imm                  | instructions  |
   |      |   |    |      |                          | (Section 4.4) |
   +------+---+----+------+--------------------------+---------------+
   |0x1c  |any|0x00|0     |dst = (u32)((u32)dst -    | Arithmetic    |
   |      |   |    |      |(u32)src)                 | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x1d  |any|0x00|any   |if dst == src goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |



Thaler                    Expires 7 April 2024                 [Page 22]

Internet-Draft                  eBPF ISA                    October 2023


   +------+---+----+------+--------------------------+---------------+
   |0x1e  |any|0x00|any   |if (u32)dst == (u32)src   | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x1f  |any|0x00|0     |dst -= src                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x20  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x21  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x22  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x23  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x24  |0x0|any |0     |dst = (u32)(dst * imm)    | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x25  |0x0|any |any   |if dst > imm goto         | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x26  |0x0|any |any   |if (u32)dst > imm goto    | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x27  |0x0|any |0     |dst *= imm                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x28  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |



Thaler                    Expires 7 April 2024                 [Page 23]

Internet-Draft                  eBPF ISA                    October 2023


   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x29  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x2a  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x2b  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x2c  |any|0x00|0     |dst = (u32)(dst * src)    | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x2d  |any|0x00|any   |if dst > src goto         | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x2e  |any|0x00|any   |if (u32)dst > (u32)src    | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x2f  |any|0x00|0     |dst *= src                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x30  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x31  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x32  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+



Thaler                    Expires 7 April 2024                 [Page 24]

Internet-Draft                  eBPF ISA                    October 2023


   |0x33  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x34  |0x0|any |0     |dst = (u32)((imm != 0) ?  | Arithmetic    |
   |      |   |    |      |((u32)dst / (u32)imm) :   | instructions  |
   |      |   |    |      |0)                        | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x34  |0x0|any |1     |dst = (u32)((imm != 0) ?  | Arithmetic    |
   |      |   |    |      |((s32)dst s/ imm) : 0)    | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x35  |0x0|any |any   |if dst >= imm goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x36  |0x0|any |any   |if (u32)dst >= imm goto   | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x37  |0x0|any |0     |dst = (imm != 0) ? (dst   | Arithmetic    |
   |      |   |    |      |/ (u32)imm) : 0           | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x37  |0x0|any |1     |dst = (imm != 0) ? (dst   | Arithmetic    |
   |      |   |    |      |s/ imm) : 0               | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x38  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x39  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x3a  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x3b  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |



Thaler                    Expires 7 April 2024                 [Page 25]

Internet-Draft                  eBPF ISA                    October 2023


   +------+---+----+------+--------------------------+---------------+
   |0x3c  |any|any |0     |dst = (u32)((src != 0) ?  | Arithmetic    |
   |      |   |    |      |((u32)dst / (u32)src) :   | instructions  |
   |      |   |    |      |0)                        | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x3c  |any|any |1     |dst = (u32)((src != 0) ?  | Arithmetic    |
   |      |   |    |      |((s32)dst s/(s32)src) :   | instructions  |
   |      |   |    |      |0)                        | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x3d  |any|0x00|any   |if dst >= src goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x3e  |any|0x00|any   |if (u32)dst >= (u32)src   | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x3f  |any|0x00|0     |dst = (src != 0) ? (dst   | Arithmetic    |
   |      |   |    |      |/ src) : 0                | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x3f  |any|0x00|1     |dst = (src != 0) ? (dst   | Arithmetic    |
   |      |   |    |      |s/ src) : 0               | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x40  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x41  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x42  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x43  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x44  |0x0|any |0     |dst = (u32)(dst | imm)    | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |



Thaler                    Expires 7 April 2024                 [Page 26]

Internet-Draft                  eBPF ISA                    October 2023


   +------+---+----+------+--------------------------+---------------+
   |0x45  |0x0|any |any   |if dst & imm goto         | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x46  |0x0|any |any   |if (u32)dst & imm goto    | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x47  |0x0|any |0     |dst |= imm                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x48  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x49  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x4a  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x4b  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x4c  |any|0x00|0     |dst = (u32)(dst | src)    | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x4d  |any|0x00|any   |if dst & src goto         | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x4e  |any|0x00|any   |if (u32)dst & (u32)src    | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x4f  |any|0x00|0     |dst |= src                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |



Thaler                    Expires 7 April 2024                 [Page 27]

Internet-Draft                  eBPF ISA                    October 2023


   +------+---+----+------+--------------------------+---------------+
   |0x50  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x51  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x52  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x53  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x54  |0x0|any |0     |dst = (u32)(dst & imm)    | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x55  |0x0|any |any   |if dst != imm goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x56  |0x0|any |any   |if (u32)dst != imm goto   | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x57  |0x0|any |0     |dst &= imm                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x58  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x59  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x5a  |any|any |any   |(deprecated,              | Legacy BPF    |



Thaler                    Expires 7 April 2024                 [Page 28]

Internet-Draft                  eBPF ISA                    October 2023


   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x5b  |any|any |any   |(deprecated,              | Legacy BPF    |
   |      |   |    |      |implementation-specific)  | Packet access |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4.5) |
   +------+---+----+------+--------------------------+---------------+
   |0x5c  |any|0x00|0     |dst = (u32)(dst & src)    | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x5d  |any|0x00|any   |if dst != src goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x5e  |any|0x00|any   |if (u32)dst != (u32)src   | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x5f  |any|0x00|0     |dst &= src                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x61  |any|0x00|any   |dst = *(u32 *)(src +      | Load and      |
   |      |   |    |      |offset)                   | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x62  |0x0|any |any   |*(u32 *)(dst + offset) =  | Load and      |
   |      |   |    |      |imm                       | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x63  |any|0x00|any   |*(u32 *)(dst + offset) =  | Load and      |
   |      |   |    |      |src                       | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x64  |0x0|any |0     |dst = (u32)(dst << imm)   | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x65  |0x0|any |any   |if dst s> imm goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+



Thaler                    Expires 7 April 2024                 [Page 29]

Internet-Draft                  eBPF ISA                    October 2023


   |0x66  |0x0|any |any   |if (s32)dst s> (s32)imm   | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x67  |0x0|any |0     |dst <<= imm               | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x69  |any|0x00|any   |dst = *(u16 *)(src +      | Load and      |
   |      |   |    |      |offset)                   | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x6a  |0x0|any |any   |*(u16 *)(dst + offset) =  | Load and      |
   |      |   |    |      |imm                       | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x6b  |any|0x00|any   |*(u16 *)(dst + offset) =  | Load and      |
   |      |   |    |      |src                       | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x6c  |any|0x00|0     |dst = (u32)(dst << src)   | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x6d  |any|0x00|any   |if dst s> src goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x6e  |any|0x00|any   |if (s32)dst s> (s32)src   | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x6f  |any|0x00|0     |dst <<= src               | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x71  |any|0x00|any   |dst = *(u8 *)(src +       | Load and      |
   |      |   |    |      |offset)                   | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x72  |0x0|any |any   |*(u8 *)(dst + offset) =   | Load and      |
   |      |   |    |      |imm                       | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |



Thaler                    Expires 7 April 2024                 [Page 30]

Internet-Draft                  eBPF ISA                    October 2023


   +------+---+----+------+--------------------------+---------------+
   |0x73  |any|0x00|any   |*(u8 *)(dst + offset) =   | Load and      |
   |      |   |    |      |src                       | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x74  |0x0|any |0     |dst = (u32)(dst >> imm)   | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x75  |0x0|any |any   |if dst s>= imm goto       | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x76  |0x0|any |any   |if (s32)dst s>= (s32)imm  | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x77  |0x0|any |0     |dst >>= imm               | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x79  |any|0x00|any   |dst = *(u64 *)(src +      | Load and      |
   |      |   |    |      |offset)                   | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x7a  |0x0|any |any   |*(u64 *)(dst + offset) =  | Load and      |
   |      |   |    |      |imm                       | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x7b  |any|0x00|any   |*(u64 *)(dst + offset) =  | Load and      |
   |      |   |    |      |src                       | store         |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 4)   |
   +------+---+----+------+--------------------------+---------------+
   |0x7c  |any|0x00|0     |dst = (u32)(dst >> src)   | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x7d  |any|0x00|any   |if dst s>= src goto       | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x7e  |any|0x00|any   |if (s32)dst s>= (s32)src  | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |



Thaler                    Expires 7 April 2024                 [Page 31]

Internet-Draft                  eBPF ISA                    October 2023


   +------+---+----+------+--------------------------+---------------+
   |0x7f  |any|0x00|0     |dst >>= src               | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x84  |0x0|0x00|0     |dst = (u32)-dst           | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x85  |0x0|any |0     |call helper function by   | Helper        |
   |      |   |    |      |address                   | functions     |
   |      |   |    |      |                          | (Section      |
   |      |   |    |      |                          | 3.3.1)        |
   +------+---+----+------+--------------------------+---------------+
   |0x85  |0x1|any |0     |call PC += imm            | Program-local |
   |      |   |    |      |                          | functions     |
   |      |   |    |      |                          | (Section      |
   |      |   |    |      |                          | 3.3.2)        |
   +------+---+----+------+--------------------------+---------------+
   |0x85  |0x2|any |0     |call helper function by   | Helper        |
   |      |   |    |      |BTF ID                    | functions     |
   |      |   |    |      |                          | (Section      |
   |      |   |    |      |                          | 3.3.1)        |
   +------+---+----+------+--------------------------+---------------+
   |0x87  |0x0|0x00|0     |dst = -dst                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x94  |0x0|any |0     |dst = (u32)((imm !=       | Arithmetic    |
   |      |   |    |      |0)?((u32)dst % (u32)imm)  | instructions  |
   |      |   |    |      |: dst)                    | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x94  |0x0|any |1     |dst = (u32)((imm != 0) ?  | Arithmetic    |
   |      |   |    |      |((s32)dst s% imm) : dst)  | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x95  |0x0|0x00|0     |return                    | Jump          |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0x97  |0x0|any |0     |dst = (imm != 0) ? (dst   | Arithmetic    |
   |      |   |    |      |% (u32)imm) : dst         | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x97  |0x0|any |1     |dst = (imm != 0) ? (dst   | Arithmetic    |
   |      |   |    |      |s% imm) : dst             | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+



Thaler                    Expires 7 April 2024                 [Page 32]

Internet-Draft                  eBPF ISA                    October 2023


   |0x9c  |any|0x00|0     |dst = (u32)((src !=       | Arithmetic    |
   |      |   |    |      |0)?((u32)dst % (u32)src)  | instructions  |
   |      |   |    |      |: dst)                    | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x9c  |any|0x00|1     |dst = (u32)((src !=       | Arithmetic    |
   |      |   |    |      |0)?((s32)dst s%           | instructions  |
   |      |   |    |      |(s32)src) :dst)           | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x9f  |any|0x00|0     |dst = (src != 0) ? (dst   | Arithmetic    |
   |      |   |    |      |% src) : dst              | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0x9f  |any|0x00|1     |dst = (src != 0) ? (dst   | Arithmetic    |
   |      |   |    |      |s% src) : dst             | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xa4  |0x0|any |0     |dst = (u32)(dst ^ imm)    | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xa5  |0x0|any |any   |if dst < imm goto         | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xa6  |0x0|any |any   |if (u32)dst < imm goto    | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xa7  |0x0|any |0     |dst ^= imm                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xac  |any|0x00|0     |dst = (u32)(dst ^ src)    | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xad  |any|0x00|any   |if dst < src goto         | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xae  |any|0x00|any   |if (u32)dst < (u32)src    | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xaf  |any|0x00|0     |dst ^= src                | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+



Thaler                    Expires 7 April 2024                 [Page 33]

Internet-Draft                  eBPF ISA                    October 2023


   |0xb4  |0x0|any |0     |dst = (u32) imm           | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xb4  |0x0|any |8     |dst = (u32) (s32) (s8)    | Arithmetic    |
   |      |   |    |      |imm                       | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xb4  |0x0|any |16    |dst = (u32) (s32) (s16)   | Arithmetic    |
   |      |   |    |      |imm                       | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xb5  |0x0|any |any   |if dst <= imm goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xb6  |0x0|any |any   |if (u32)dst <= imm goto   | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xb7  |0x0|any |0     |dst = imm                 | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xb7  |0x0|any |8     |dst = (s64) (s8) imm      | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xb7  |0x0|any |16    |dst = (s64) (s16) imm     | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xb7  |0x0|any |32    |dst = (s64) (s32) imm     | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xbc  |any|0x00|0     |dst = (u32) src           | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xbc  |any|0x00|8     |dst = (u32) (s32) (s8)    | Arithmetic    |
   |      |   |    |      |src                       | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xbc  |any|0x00|16    |dst = (u32) (s32) (s16)   | Arithmetic    |
   |      |   |    |      |src                       | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+



Thaler                    Expires 7 April 2024                 [Page 34]

Internet-Draft                  eBPF ISA                    October 2023


   |0xbd  |any|0x00|any   |if dst <= src goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xbe  |any|0x00|any   |if (u32)dst <= (u32)src   | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xbf  |any|0x00|0     |dst = src                 | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xbf  |any|0x00|8     |dst = (s64) (s8) src      | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xbf  |any|0x00|16    |dst = (s64) (s16) src     | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xbf  |any|0x00|32    |dst = (s64) (s32) src     | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xc3  |any|0x00|any   |lock *(u32 *)(dst +       | Atomic        |
   |      |   |    |      |offset) += src            | operations    |
   |      |   |    |      |                          | (Section 4.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xc3  |any|0x01|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     *(u32 *)(dst + offset) += src| (Section 4.3) |
   |      |   |    |      |     src = *(u32 *)(dst + offset)|               |
   +------+---+----+------+--------------------------+---------------+
   |0xc3  |any|0x40|any   |*(u32 *)(dst +            | Atomic        |
   |      |   |    |      |offset) |= src            | operations    |
   |      |   |    |      |                          | (Section 4.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xc3  |any|0x41|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     *(u32 *)(dst + offset) |= src| (Section 4.3) |
   |      |   |    |      |     src = *(u32 *)(dst + offset)|               |
   +------+---+----+------+--------------------------+---------------+
   |0xc3  |any|0x50|any   |*(u32 *)(dst + offset)    | Atomic        |
   |      |   |    |      |&= src                    | operations    |
   |      |   |    |      |                          | (Section 4.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xc3  |any|0x51|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |



Thaler                    Expires 7 April 2024                 [Page 35]

Internet-Draft                  eBPF ISA                    October 2023


   |      |   |    |      |     *(u32 *)(dst + offset) &= src| (Section 4.3) |
   |      |   |    |      |     src = *(u32 *)(dst + offset)|               |
   +------+---+----+------+--------------------------+---------------+
   |0xc3  |any|0xa0|any   |*(u32 *)(dst + offset)    | Atomic        |
   |      |   |    |      |^= src                    | operations    |
   |      |   |    |      |                          | (Section 4.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xc3  |any|0xa1|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     *(u32 *)(dst + offset) ^= src| (Section 4.3) |
   |      |   |    |      |     src = *(u32 *)(dst + offset)|               |
   +------+---+----+------+--------------------------+---------------+
   |0xc3  |any|0xe1|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     temp = *(u32 *)(dst + offset)| (Section 4.3) |
   |      |   |    |      |     *(u32 *)(dst + offset) = src|               |
   |      |   |    |      |     src = temp           |               |
   +------+---+----+------+--------------------------+---------------+
   |0xc3  |any|0xf1|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     temp = *(u32 *)(dst + offset)| (Section 4.3) |
   |      |   |    |      |     if *(u32)(dst + offset) == R0|               |
   |      |   |    |      |        *(u32)(dst + offset) = src|               |
   |      |   |    |      |     R0 = temp            |               |
   +------+---+----+------+--------------------------+---------------+
   |0xc4  |0x0|any |0     |dst = (u32)(dst s>> imm)  | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xc5  |0x0|any |any   |if dst s< imm goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xc6  |0x0|any |any   |if (s32)dst s< (s32)imm   | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xc7  |0x0|any |0     |dst s>>= imm              | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xcc  |any|0x00|0     |dst = (u32)(dst s>> src)  | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xcd  |any|0x00|any   |if dst s< src goto        | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |



Thaler                    Expires 7 April 2024                 [Page 36]

Internet-Draft                  eBPF ISA                    October 2023


   +------+---+----+------+--------------------------+---------------+
   |0xce  |any|0x00|any   |if (s32)dst s< (s32)src   | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xcf  |any|0x00|0     |dst s>>= src              | Arithmetic    |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.1) |
   +------+---+----+------+--------------------------+---------------+
   |0xd4  |0x0|0x10|0     |dst = htole16(dst)        | Byte swap     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.2) |
   +------+---+----+------+--------------------------+---------------+
   |0xd4  |0x0|0x20|0     |dst = htole32(dst)        | Byte swap     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.2) |
   +------+---+----+------+--------------------------+---------------+
   |0xd4  |0x0|0x40|0     |dst = htole64(dst)        | Byte swap     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.2) |
   +------+---+----+------+--------------------------+---------------+
   |0xd5  |0x0|any |any   |if dst s<= imm goto       | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xd6  |0x0|any |any   |if (s32)dst s<= (s32)imm  | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xd7  |0x0|0x10|0     |dst = bswap16(dst)        | Byte swap     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.2) |
   +------+---+----+------+--------------------------+---------------+
   |0xd7  |0x0|0x20|0     |dst = bswap32(dst)        | Byte swap     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.2) |
   +------+---+----+------+--------------------------+---------------+
   |0xd7  |0x0|0x40|0     |dst = bswap64(dst)        | Byte swap     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.2) |
   +------+---+----+------+--------------------------+---------------+
   |0xdb  |any|0x00|any   |lock *(u64 *)(dst +       | Atomic        |
   |      |   |    |      |offset) += src            | operations    |
   |      |   |    |      |                          | (Section 4.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xdb  |any|0x01|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     *(u64 *)(dst + offset) += src| (Section 4.3) |



Thaler                    Expires 7 April 2024                 [Page 37]

Internet-Draft                  eBPF ISA                    October 2023


   |      |   |    |      |     src = *(u64 *)(dst + offset)|               |
   +------+---+----+------+--------------------------+---------------+
   |0xdb  |any|0x40|any   |*(u64 *)(dst +            | Atomic        |
   |      |   |    |      |offset) |= src            | operations    |
   |      |   |    |      |                          | (Section 4.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xdb  |any|0x41|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     *(u64 *)(dst + offset) |= src| (Section 4.3) |
   |      |   |    |      |     src = *(u64 *)(dst + offset)|               |
   +------+---+----+------+--------------------------+---------------+
   |0xdb  |any|0x50|any   |*(u64 *)(dst + offset)    | Atomic        |
   |      |   |    |      |&= src                    | operations    |
   |      |   |    |      |                          | (Section 4.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xdb  |any|0x51|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     *(u64 *)(dst + offset) &= src| (Section 4.3) |
   |      |   |    |      |     src = *(u64 *)(dst + offset)|               |
   +------+---+----+------+--------------------------+---------------+
   |0xdb  |any|0xa0|any   |*(u64 *)(dst + offset)    | Atomic        |
   |      |   |    |      |^= src                    | operations    |
   |      |   |    |      |                          | (Section 4.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xdb  |any|0xa1|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     *(u64 *)(dst + offset) ^= src| (Section 4.3) |
   |      |   |    |      |     src = *(u64 *)(dst + offset)|               |
   +------+---+----+------+--------------------------+---------------+
   |0xdb  |any|0xe1|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     temp = *(u64 *)(dst + offset)| (Section 4.3) |
   |      |   |    |      |     *(u64 *)(dst + offset) = src|               |
   |      |   |    |      |     src = temp           |               |
   +------+---+----+------+--------------------------+---------------+
   |0xdb  |any|0xf1|any   |lock:                     | Atomic        |
   |      |   |    |      |                          | operations    |
   |      |   |    |      |     temp = *(u64 *)(dst + offset)| (Section 4.3) |
   |      |   |    |      |     if *(u64)(dst + offset) == R0|               |
   |      |   |    |      |        *(u64)(dst + offset) = src|               |
   |      |   |    |      |     R0 = temp            |               |
   +------+---+----+------+--------------------------+---------------+
   |0xdc  |0x0|0x10|0     |dst = htobe16(dst)        | Byte swap     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.2) |
   +------+---+----+------+--------------------------+---------------+
   |0xdc  |0x0|0x20|0     |dst = htobe32(dst)        | Byte swap     |
   |      |   |    |      |                          | instructions  |



Thaler                    Expires 7 April 2024                 [Page 38]

Internet-Draft                  eBPF ISA                    October 2023


   |      |   |    |      |                          | (Section 3.2) |
   +------+---+----+------+--------------------------+---------------+
   |0xdc  |0x0|0x40|0     |dst = htobe64(dst)        | Byte swap     |
   |      |   |    |      |                          | instructions  |
   |      |   |    |      |                          | (Section 3.2) |
   +------+---+----+------+--------------------------+---------------+
   |0xdd  |any|0x00|any   |if dst s<= src goto       | Jump          |
   |      |   |    |      |+offset                   | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+
   |0xde  |any|0x00|any   |if (s32)dst s<= (s32)src  | Jump          |
   |      |   |    |      |goto +offset              | instructions  |
   |      |   |    |      |                          | (Section 3.3) |
   +------+---+----+------+--------------------------+---------------+

                                  Table 15

8.  Normative References

   [RFC8126]  "Guidelines for Writing an IANA Considerations Section in
              RFCs", RFC 8126, <https://www.rfc-editor.org/rfc/rfc8126>.

Author's Address

   Dave Thaler (editor)
   Microsoft
   Redmond, WA 98052
   United States of America
   Email: dthaler@microsoft.com






















Thaler                    Expires 7 April 2024                 [Page 39]
